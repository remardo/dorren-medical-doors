interface FormData {
  [key: string]: string;
}

class TelegramService {
  private static instance: TelegramService;
  private botToken: string;
  private chatId: string;

  constructor() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ .env —Ñ–∞–π–ª–µ
    this.botToken = (import.meta as any).env?.VITE_TELEGRAM_BOT_TOKEN || 'YOUR_BOT_TOKEN';
    this.chatId = (import.meta as any).env?.VITE_TELEGRAM_CHAT_ID || 'YOUR_CHAT_ID';
  }

  static getInstance(): TelegramService {
    if (!TelegramService.instance) {
      TelegramService.instance = new TelegramService();
    }
    return TelegramService.instance;
  }

  private formatMessage(data: FormData, formType: string): string {
    const timestamp = new Date().toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    });

    let message = `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ DORREN\n\n`;
    message += `üìÖ –í—Ä–µ–º—è: ${timestamp}\n`;
    message += `üìã –¢–∏–ø —Ñ–æ—Ä–º—ã: ${formType}\n\n`;

    Object.entries(data).forEach(([key, value]) => {
      if (value && value.trim()) {
        const label = this.getFieldLabel(key);
        message += `${label}: ${value}\n`;
      }
    });

    return message;
  }

  private getFieldLabel(key: string): string {
    const labels: { [key: string]: string } = {
      'name': 'üë§ –ò–º—è',
      'company': 'üè¢ –ö–æ–º–ø–∞–Ω–∏—è',
      'phone': 'üìû –¢–µ–ª–µ—Ñ–æ–Ω',
      'email': 'üìß Email',
      'project': 'üèóÔ∏è –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞',
      'contact-name': 'üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ',
      'organization': 'üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è',
      'calc-phone': 'üìû –¢–µ–ª–µ—Ñ–æ–Ω',
      'facility-type': 'üè• –¢–∏–ø —É—á—Ä–µ–∂–¥–µ–Ω–∏—è',
      'doors-count': 'üö™ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π',
      'door-types': 'üö™ –¢–∏–ø—ã –¥–≤–µ—Ä–µ–π',
      'project-details': 'üìù –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
      'position': 'üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å',
      'interest': 'üéØ –ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è',
      'cat-name': 'üë§ –ò–º—è',
      'cat-email': 'üìß Email',
      'cat-company': 'üè¢ –ö–æ–º–ø–∞–Ω–∏—è',
      'cat-position': 'üíº –î–æ–ª–∂–Ω–æ—Å—Ç—å',
      'cat-interest': 'üéØ –ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è'
    };

    return labels[key] || key;
  }

  async sendMessage(data: FormData, formType: string): Promise<boolean> {
    try {
      const text = this.formatMessage(data, formType);
      const url = `https://api.telegram.org/bot${this.botToken}/sendMessage`;

      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram:', { chatId: this.chatId, formType, url: url.replace(this.botToken, '***') });

      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: this.chatId,
          text: text
        }),
      });

      const result = await response.json();
      console.log('üì® –û—Ç–≤–µ—Ç Telegram API:', result);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å
      if (!response.ok) {
        console.error('‚ùå HTTP –æ—à–∏–±–∫–∞:', response.status, response.statusText);
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç Telegram API –±–æ–ª–µ–µ –º—è–≥–∫–æ
      if (result.ok === false) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Telegram API:', result.description);
        // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, –∞ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if (result.error_code === 400 && result.description.includes('chat not found')) {
          console.error('üí¨ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Chat ID');
        }
      }

      // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ HTTP –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ (—Å—Ç–∞—Ç—É—Å 2xx)
      if (response.ok) {
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram —É—Å–ø–µ—à–Ω–æ');
        return true;
      }

      console.warn('‚ö†Ô∏è HTTP —Å—Ç–∞—Ç—É—Å –Ω–µ —É—Å–ø–µ—à–µ–Ω:', response.status, response.statusText);
      return false;
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
      throw error;
    }
  }
}

export default TelegramService;